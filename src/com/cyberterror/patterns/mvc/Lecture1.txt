MVC pattern
(Model-View-Controller)

Зачем используется:
1. Разделяем ответсвенность между элементами программы на элементы логики и представления
2. Все компоненты могут быть индивидуально изменены
3. Легче найти источники проблем и ошибок


Представляет собой 4 элемента:

1. Модель
Представляет собой определение объекта:
    1.1. атрибуты с сеттерами и геттерами (возможность внедрить данные в программу)
    1.2. Отвечает на запросы контроллера

2. Контроллер
Активная часть программы. Логика приложения, то есть принимает весь ввод от пользователя (мышь, клавиатура или что то
другое) и обрабатывает вызывая методы и события.
Находится за видом и слушет ввод в элементы вида. Отвечает за процесс коммуникации между видом и моделью.
Обновляет модель и обновляет вид.
Когда обновляется модель контроллер обновляет вид, и наоборот.

3. Вид
В случае JavaFX может быть представлен в формате XML.
Определяет все элементы графического интерфейса с которыми пользователь взаимодействует.
Может разрабатываться независимо. Логика такая - програмист пишет логику, дизайнер работает над представлением, в дальнейшем
может спокойно изменять его особенности (стайлинг).

4. Основной класс
По сути штаб всего приложения.
В основном классе мы устанавливаем соединение между видами и контроллерами.
Дает возможность Inter-Controller-Communication. Можем вызывать методы одного контроллера в другом. Все методы, отвечающие за
отображение индивидуальных окон распологаются в основном классе. Основной класс несет ответсвенность за менеджмент окон

Коммуникации:
Модель <-> Контроллер
Контроллер <-> Вид
Основной класс <-> Контроллер
Основной класс <-> Вид

Как распределяются файлы по пакетам:
../controller
  .. Основной класс
  .. Контроллер основного окна
../model
  .. Классы модели
../view
  .. Файлы вида